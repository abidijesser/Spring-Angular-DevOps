pipeline {
    agent any

    environment {
        VERSION = "1.0.${env.BUILD_NUMBER}"
        DOCKER_IMAGE = "sinda12/achat-frontend-sindachammem-4twin9"
    }

    tools {
        nodejs 'NodeJS-18'  // Make sure this matches the name of the Node.js installation in Jenkins' Global Tool Configuration
    }

    stages {

        stage('Checkout') {
            steps {
                git branch: 'master', url: 'https://github.com/manel-00/achat-4twin9-groupe-7.git'
            }
        }

        stage('Install Angular CLI & Dependencies') {
            steps {
                dir('frontend') {
                    sh '''
                        npm config set registry https://registry.npmjs.org/
                        export NODE_OPTIONS=--openssl-legacy-provider
                        npm install --legacy-peer-deps
                    '''
                }
            }
        }

        stage('Nexus Login') {
            steps {
                script {
                    // Génère un settings.xml avec les identifiants Nexus
                    sh '''
                        cat > settings.xml <<EOF
<settings>
  <servers>
    <server>
      <id>nexus</id>
      <username>admin</username> 
      <password>c40eebf3-c9c0-405b-8334-fc9201a626bf</password> 
    </server>
  </servers>
</settings>
EOF
                    '''
                }
            }
        }

        stage('Build Angular App') {
            steps {
                dir('frontend') {
                    sh 'export NODE_OPTIONS=--openssl-legacy-provider && ng build'
                }
            }
        }

        stage('Deploy Frontend to Nexus') {
            steps {
                dir('frontend') {
                    script {
                        try {
                            // 1. Backup du package.json
                            sh 'cp package.json package.json.backup'

                            // 2. Modification directe du champ version avec sed
                            sh "sed -i 's/\"version\": *\"[^\"]*\"/\"version\": \"${VERSION}\"/' package.json"

                            // 3. Vérification
                            sh '''
                                echo "=== Version après modification ==="
                                grep version package.json || { echo "ERREUR: Version manquante"; exit 1; }
                            '''

                            // 4. Publication Nexus
                            sh 'npm publish --registry=http://localhost:8081/repository/achat-frontend-sindachammem-4TWIN9-groupe-4/'

                        } catch (Exception e) {
                            sh 'mv package.json.backup package.json'
                            error "Échec du déploiement: ${e.getMessage()}"
                        } finally {
                            sh 'rm -f package.json.backup .npmrc'
                        }
                    }
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir('frontend') {
                    sh 'sonar-scanner'
                }
            }
        }

        stage('Docker Login') {
            steps {
                script {
                    sh 'echo "cindaa123." | docker login -u "sinda12" --password-stdin'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dir('frontend') {
                        sh "docker build -t ${DOCKER_IMAGE}:${VERSION} -t ${DOCKER_IMAGE}:latest ."
                    }
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    sh "docker push ${DOCKER_IMAGE}:${VERSION}"
                    sh "docker push ${DOCKER_IMAGE}:latest"
                }
            }
        }
    }
    
    post {
        success {
            echo "Frontend Angular build ${VERSION} succeeded!"
        }
        failure {
            echo "Frontend Angular build ${VERSION} failed!"
        }
    }
}
